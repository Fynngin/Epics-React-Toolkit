{"version":3,"sources":["api/api.ts","BaseComponents/BaseButton.tsx","BaseComponents/BaseContainer.tsx","Login/Login.tsx","Home/SpinnerOddsTable.tsx","Home/SpinnerOddsChart.tsx","Home/SpinnerOdds.tsx","Home/StorePack.tsx","Home/StorePackDisplay.tsx","Home/PackStock.tsx","Home/Home.tsx","AccountTransfer/AccountSelector.tsx","BaseComponents/ProgressBar.tsx","BaseComponents/BaseCheckbox.tsx","AccountTransfer/FilterSelector.tsx","AccountTransfer/ModeSwitcher.tsx","AccountTransfer/TradeOverview.tsx","AccountTransfer/AccountTransfer.tsx","Navigation/Navbar.tsx","FancyShowcase/CardImage.tsx","FancyShowcase/SortableItem.tsx","FancyShowcase/FancyShowcase.tsx","App.tsx","reportWebVitals.ts","theme.ts","index.tsx"],"names":["http","axiosRateLimit","axios","create","maxRequests","perMilliseconds","login","credentials","a","method","data","response","status","getStorePacks","jwt","categoryId","packs","page","headers","params","length","el","pack","push","getSpinner","searchUsers","username","getUserCollections","userId","getAllItemIds","collectionId","itemType","ids","template","cardIds","stickerIds","getIncomingTrades","categroyId","trades","count","trade","offeredBy","getAllShowcases","showcases","changeShowcase","showcase","id","BaseButton","text","children","type","className","onClick","BaseContainer","title","description","loading","Login","useState","email","password","creds","setCreds","hideLoginInfo","toggleLoginInfo","setLoading","history","useHistory","location","useLocation","auth","useAuth","event","preventDefault","user","from","state","pathname","signin","replace","onSubmit","autoComplete","placeholder","onChange","e","target","value","required","hidden","rel","href","SpinnerOddsTable","spinner","TableContainer","Table","TableHead","TableRow","TableCell","TableBody","items","map","item","name","chance","SpinnerOddsChart","spinnerOdds","setSpinnerOdds","useEffect","odds","options","chart","stacked","foreColor","background","theme","mode","plotOptions","bar","horizontal","stroke","width","colors","xaxis","categories","labels","formatter","val","max","yaxis","undefined","tooltip","y","fill","opacity","legend","position","horizontalAlign","noData","grid","show","height","series","ExpandMore","styled","props","expand","other","IconButton","transform","marginLeft","transition","transitions","duration","shortest","sortSpinnerOddsByChance","sort","b","SpinnerOdds","setSpinner","expandSpinnerOddsTable","setExpandSpinnerOddsTable","initSpinnerOdds","Card","CardHeader","avatar","Redeem","CardContent","CardActions","disableSpacing","sx","cursor","style","fontSize","Collapse","in","timeout","unmountOnExit","getPackImage","primaryImage","images","find","img","url","StorePack","variant","Avatar","src","process","acquireType","Typography","CardMedia","p","component","image","alt","textAlign","inventoryCount","StorePackDisplay","Grid","container","spacing","justifyContent","padding","filterActivePacks","today","Date","filter","purchaseEnd","sortPacksByInventoryCount","PackStock","setPacks","mounted","storePacks","activePacks","sortedPacks","initStorePacks","MonetizationOn","Home","lg","sm","AccountSelector","userSearchInput","setUserSearchInput","userSearchResults","setUserSearchResults","selectedUser","setSelectedUser","showSearchResultsMenu","setShowSearchResultsMenu","handleUserSearch","searchResults","inputField","useRef","window","addEventListener","evt","current","contains","ref","onUserSelect","handleUserSelection","icon","faSearch","ProgressBar","progress","barWidth","setBarWidth","BaseCheckbox","label","htmlFor","defaultChecked","FilterSelector","handleSeasonSelect","inputs","Array","document","querySelectorAll","input","season","TransferMode","ModeSwitcher","handleModeSelect","SEND","ACCEPT","TradeOverview","defaultDescription","setDescription","setTrades","getTrades","useCallback","newTrades","handleUserSelect","AccountTransfer","transferMode","setTransfermode","tradeItems","setTradeItems","collectionProgress","setCollectionProgress","totalCollections","setTotalCollections","allowedSeasons","setAllowedSeasons","collections","forEach","coll","some","collection","properties","seasons","includes","c","entity_types","scanUserItems","Navbar","navToggleRef","isActiveRoute","routeName","routes","faHome","isActive","path","disabled","faTags","faGamepad","faUsers","faExchangeAlt","faBoxOpen","faFire","route","checked","handleNavButtonClick","size","forwardRef","card","size402","SortableItem","useSortable","attributes","listeners","setNodeRef","CSS","Transform","toString","FancyShowcase","setShowcases","hasShowcaseChanges","setHasShowcaseChanges","activeElement","setActiveElement","divider","sensors","useSensors","useSensor","PointerSensor","KeyboardSensor","coordinateGetter","sortableKeyboardCoordinates","Object","values","payload","getShowcasePayload","main","order","visible","cards","stickers","sticker","res","shelve","s","getShowcase","onDragEnd","active","over","split","activeShowcaseKey","activeItemId","overShowcaseKey","overItemId","oldIndex","findIndex","newIndex","oldShowcase","arrayMove","newShowcase","splice","onDragStart","element","showcaseKey","itemId","getItemById","collisionDetection","closestCenter","entries","dropAnimation","easing","dragSourceOpacity","authContext","createContext","signout","ProvideAuth","setUser","newUser","useProvideAuth","Provider","useContext","PrivateRoute","rest","render","to","App","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","createTheme","palette","primary","secondary","ReactDOM","StrictMode","ThemeProvider","getElementById"],"mappings":"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","file":"static/js/main.3cf83fa6.chunk.js","sourcesContent":["import axios from \"axios\";\nimport axiosRateLimit from \"axios-rate-limit\";\nimport { UserCredentials } from \"../interfaces/UserCredentials\";\nimport { Pack } from \"../interfaces/Pack\";\nimport { Spinner } from \"../interfaces/Spinner\";\nimport { User } from \"../interfaces/User\";\nimport { UserSearchResult } from \"../interfaces/UserSearchResult\";\nimport { UserCollection } from \"../interfaces/UserCollection\";\nimport { Trade } from \"../interfaces/Trade\";\nimport { Showcase } from \"../interfaces/Showcase\";\nimport { ShowcasePayload } from \"../interfaces/ShowcasePayload\";\n\nconst http = axiosRateLimit(axios.create(), {maxRequests: 130, perMilliseconds: 60000})\n\nexport async function login(credentials: UserCredentials): Promise<User> {\n    const response: any = await http('https://api.epics.gg/api/v1/auth/login', {\n        method: 'POST',\n        data: credentials\n    })\n\n    if (response.status === 200) \n        return response.data.data as User;\n    \n    return {} as User;\n}\n\nexport async function getStorePacks(jwt: string, categoryId: number): Promise<Pack[]> {\n    let packs: Pack[] = [];\n    let page = 1;\n    while (true) {\n        const response: any = await http('https://api.epics.gg/api/v1/packs', {\n            method: 'GET',\n            headers: {\n                'x-user-jwt': jwt\n            },\n            params: {\n                'categoryId': categoryId,\n                'page': page\n            }\n        })\n        page += 1;\n\n        if (response.status !== 200)\n            break;\n        \n        if (response.data.data.length === 0)\n            break;\n        \n        for (const el of response.data.data) {\n            const pack = el as Pack;\n            packs.push(pack);\n        }\n    }\n    return packs;\n}\n\nexport async function getSpinner(jwt: string, categoryId: number): Promise<Spinner> {\n    const response: any = await http('https://api.epics.gg/api/v1/spinner', {\n        method: 'GET',\n        headers: {\n            'x-user-jwt': jwt\n        },\n        params: {\n            'categoryId': categoryId\n        }\n    });\n\n    if (response.status !== 200)\n        return {} as Spinner;\n    \n    return response.data.data as Spinner;\n}\n\nexport async function searchUsers(jwt: string, username: string): Promise<UserSearchResult[]> {\n    const response: any = await http('https://api.epics.gg/api/v1/users/search', {\n        method: 'GET',\n        headers: {\n            'x-user-jwt': jwt\n        },\n        params: {\n            'username': username\n        }\n    });\n\n    if (response.status !== 200)\n        return [];\n    \n    return response.data.data as UserSearchResult[];\n}\n\nexport async function getUserCollections(jwt: string, userId: number, categoryId: number): Promise<UserCollection[]> {\n    const response: any = await http(`https://api.epics.gg/api/v1/collections/users/${userId}/user-summary`, {\n        method: 'GET',\n        headers: {\n            'x-user-jwt': jwt\n        },\n        params: {\n            'categoryId': categoryId\n        }\n    });\n\n    if (response.status !== 200)\n        return [];\n    \n    return response.data.data as UserCollection[];\n}\n\nexport async function getAllItemIds(jwt: string, userId: number, collectionId: number, itemType: 'card'|'sticker', categoryId: number): Promise<number[]> {\n    const response: any = await http(`https://api.epics.gg/api/v1/collections/users/${userId}/${itemType}ids`, {\n        method: 'GET',\n        headers: {\n            'x-user-jwt': jwt\n        },\n        params: {\n            'collectionId': collectionId,\n            'categoryId': categoryId\n        }\n    })\n\n    if (response.status !== 200)\n        return [];\n    \n    let ids: number[] = []\n    if (itemType === 'card') {\n        for (const template of response.data.data) {\n            ids = [...ids, ...template.cardIds];\n        }\n    } else {\n        for (const template of response.data.data) {\n            ids = [...ids, ...template.stickerIds];\n        }\n    }\n\n    return ids;\n}\n\nexport async function getIncomingTrades(jwt: string, categroyId: number, userId: number): Promise<Trade[]> {\n    let trades = [] as Trade[];\n    let page = 1;\n\n    while (true) {\n        const response: any = await http('https://api.epics.gg/api/v1/trade', {\n            method: 'GET',\n            headers: {\n                'x-user-jwt': jwt\n            },\n            params: {\n                'page': page,\n                'categoryId': categroyId,\n                'status': 'open'\n            }\n        });\n        page += 1;\n\n        if (response.status !== 200)\n            break;\n        \n        if (response.data.data.count === 0)\n            break;\n        \n        for (const el of response.data.data.trades) {\n            const trade = el as Trade;\n            if (trade.offeredBy === userId)\n                continue;\n            trades.push(trade);\n        }\n    }\n\n    return trades;\n}\n\nexport async function getMainShowcase(jwt: string, userId: number): Promise<Showcase> {\n    const response: any = await http(`https://api.epics.gg/api/v1/showcase/${userId}/main`, {\n        method: 'GET',\n        headers: {\n            'x-user-jwt': jwt\n        }\n    })\n\n    if (response.status !== 200)\n        return {} as Showcase;\n    \n    return response.data.data as Showcase;\n}\n\nexport async function getAllShowcases(jwt: string, userId: number): Promise<Showcase[]> {\n    const response: any = await http(`https://api.epics.gg/api/v1/showcase/${userId}/shelves`, {\n        method: 'GET',\n        headers: {\n            'x-user-jwt': jwt\n        }\n    })\n\n    if (response.status !== 200)\n        return [];\n    \n    return response.data.data.showcases as Showcase[];\n}\n\nexport async function changeShowcase(jwt: string, showcase: ShowcasePayload): Promise<Showcase> {\n    const response: any = await http(`https://api.epics.gg/api/v1/showcase/shelf/${showcase.id}`, {\n        method: 'PATCH',\n        headers: {\n            'x-user-jwt': jwt\n        },\n        data: showcase\n    })\n\n    if (response.status !== 200)\n        return {} as Showcase;\n    \n    return response.data.data as Showcase;\n}\n","import './BaseButton.css';\nimport { ReactNode } from \"react\"\n\ntype Props = {\n    text?: string\n    children?: ReactNode\n    type?: 'button' | 'submit' | 'reset'\n    className?: string\n    onClick?: Function\n}\n\nexport default function BaseButton({text, children, type, className, onClick}: Props) {\n    function handleClick() {\n        if (onClick)\n            onClick();\n    }\n\n    return(\n        <button className={`baseBtn ${className}`} type={type} onClick={handleClick}>\n            <p>{text}</p>\n            {children}\n        </button>\n    )\n}","import './BaseContainer.css';\nimport { ReactNode } from \"react\"\n\ntype Props = {\n    title?: string\n    description?: string\n    className?: string\n    children?: ReactNode\n    loading?: boolean\n}\n\nexport default function BaseContainer({title, description, className, children, loading}: Props) {\n    return(\n        <div className={`baseContainer ${className} ${loading ? 'loading' : ''}`}>\n            {title ?\n                <h2 className='baseContainerTitle'>\n                    {title}\n                </h2>\n            : <></>}\n            {description ? \n                <p className='baseContainerDescription'>\n                    {description}\n                </p>\n            : <></>}\n            {title ? \n                <div className='dividerLine'/>\n            : <></>}\n            <div className='containerContents'>\n                {children}\n            </div>\n        </div>\n    )\n}","import { useState } from \"react\"\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport { login } from \"../api/api\";\nimport { useAuth } from '../App';\nimport { User } from \"../interfaces/User\";\nimport BaseButton from \"../BaseComponents/BaseButton\";\nimport BaseContainer from \"../BaseComponents/BaseContainer\";\nimport './Login.css';\n\nexport default function Login() {\n    const [creds, setCreds] = useState({email: '', password: ''});\n    const [hideLoginInfo, toggleLoginInfo] = useState(true);\n    const [loading, setLoading] = useState(false);\n    const history = useHistory();\n    const location = useLocation();\n    const auth = useAuth();\n\n    async function handleLogin(event: React.FormEvent) {\n        event.preventDefault();\n        setLoading(true);\n        const user: User = await login(creds);\n        if (user.jwt) {\n            const from: any = location.state || { from: { pathname: '/' } };\n            auth.signin(user);\n            history.replace(from);\n            history.push('/');\n        }\n    }\n\n    return(\n        <div className='flex flex-col items-center justify-center py-12 px-12 max-w-xl m-auto'>\n            <h1 className='mb-2 text-xl text-center'>\n                Welcome to Epics Toolkit v2\n            </h1>\n            <BaseContainer className={loading ? 'loading' : ''} title='Login' description='Log in with your Epics Account.'>\n                <form className='space-y-4 mb-4' onSubmit={handleLogin}>\n                    <div>\n                        <input\n                            id='email'\n                            type='email'\n                            autoComplete='email'\n                            placeholder='E-Mail'\n                            className='loginInput'\n                            onChange={e => setCreds({...creds, email: e.target.value})}\n                            value={creds.email}\n                            required\n                        />\n                    </div>\n                    <div>\n                        <input \n                            id='password' \n                            type='password' \n                            autoComplete='current-password' \n                            placeholder='Password'\n                            className='loginInput'\n                            onChange={e => setCreds({...creds, password: e.target.value})}\n                            value={creds.password}\n                            required\n                        />\n                    </div>\n                    <div className='mt-6'>\n                        <BaseButton type='submit'>\n                            Log In\n                        </BaseButton>\n                    </div>\n                </form>\n                <div className='text-center'>\n                    <span className='infoTextLink' onClick={() => toggleLoginInfo(!hideLoginInfo)}>\n                        Why is this needed?\n                    </span>\n                    <p hidden={hideLoginInfo}>\n                        Your login is needed to send requests to the Epics API.\n                        Your login credentials will never be saved!\n                        All my code can be found on my&nbsp;\n                        <a target=\"_blank\" rel=\"noopener noreferrer\"  href=\"https://github.com/Fynngin/Epics-React-Toolkit\">GitHub</a>\n                        , if you want to verify yourself.\n                    </p>\n                </div>\n            </BaseContainer>\n        </div>\n    )\n}","import { Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from \"@mui/material\";\nimport { Spinner } from \"../interfaces/Spinner\";\n\nexport default function SpinnerOddsTable({spinner}: {spinner: Spinner}) {\n    return(\n        <TableContainer>\n            <Table>\n                <TableHead>\n                    <TableRow>\n                        <TableCell>Item</TableCell>\n                        <TableCell>Chance</TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {spinner.items.map(item => (\n                        <TableRow key={item.id}>\n                            <TableCell>{item.name}</TableCell>\n                            <TableCell>{item.chance}</TableCell>\n                        </TableRow>\n                    ))}\n                </TableBody>\n            </Table>\n        </TableContainer>\n    )\n}","import { useEffect, useState } from \"react\";\nimport ReactApexChart from \"react-apexcharts\";\nimport { Spinner } from \"../interfaces/Spinner\";\n\ninterface ItemChance {\n    name: string\n    data: number[]\n}\n\nexport default function SpinnerOddsChart({ spinner }: {spinner: Spinner}) {\n    const [spinnerOdds, setSpinnerOdds] = useState<ItemChance[]>([]);\n\n    useEffect(() => {\n        if (spinner.items) {\n            const odds: ItemChance[] = spinner.items.map(item => {\n                return {name: item.name, data: [item.chance]} as ItemChance;\n            })\n            setSpinnerOdds(odds);\n        }\n    }, [spinner])\n\n    const options: any = {\n        chart: {\n            type: 'bar',\n            stacked: true,\n            foreColor: '#fff',\n            background: 'transparent',\n        },\n        theme: {\n            mode: 'dark'\n        },\n        plotOptions: {\n            bar: {\n                horizontal: true,\n            },\n        },\n        stroke: {\n            width: 1,\n            colors: ['#fff']\n        },\n        xaxis: {\n            categories: [''],\n            labels: {\n                formatter: (val: any) => {\n                    return val + \"%\"\n                }\n            },\n            max: 100\n        },\n        yaxis: {\n            title: {\n                text: undefined\n            }\n        },\n        tooltip: {\n            theme: 'dark',\n            y: {\n                formatter: (val: any) => {\n                    return val + \"%\"\n                }\n            }\n        },\n        fill: {\n            opacity: 1\n        },\n        legend: {\n            position: 'top',\n            horizontalAlign: 'left'\n        },\n        noData: {\n            text: 'Spinner unavailable.'\n        },\n        grid: {\n            show: false\n        }\n    }\n\n    return(\n        <ReactApexChart height='100%' options={options} type='bar' series={spinnerOdds} />\n    )\n}","import SpinnerOddsTable from \"./SpinnerOddsTable\";\nimport SpinnerOddsChart from \"./SpinnerOddsChart\";\nimport { Card, CardActions, CardContent, CardHeader, Collapse, IconButton } from \"@mui/material\";\nimport { ExpandMore as ExpandMoreIcon, Redeem } from \"@mui/icons-material\";\nimport { styled } from '@mui/material/styles';\nimport { useAuth } from \"../App\";\nimport { useEffect, useState } from \"react\";\nimport { Spinner } from \"../interfaces/Spinner\";\nimport { getSpinner } from \"../api/api\";\nimport { SpinnerItem } from \"../interfaces/SpinnerItem\";\n\nconst ExpandMore = styled((props: {expand: boolean}) => {\n  const { expand: boolean, ...other } = props;\n  return <IconButton {...other} />;\n    })(({ theme, expand }) => ({\n    transform: !expand ? 'rotate(0deg)' : 'rotate(180deg)',\n    marginLeft: 'auto',\n    transition: theme.transitions.create('transform', {\n        duration: theme.transitions.duration.shortest,\n    }),\n}));\n\nfunction sortSpinnerOddsByChance(spinner: Spinner) {\n    return spinner.items.sort((a: SpinnerItem, b: SpinnerItem) => b.chance - a.chance);\n}\n\nexport default function SpinnerOdds() {\n    const auth = useAuth();\n    const [spinner, setSpinner] = useState({} as Spinner);\n    const [expandSpinnerOddsTable, setExpandSpinnerOddsTable] = useState(false);\n\n    useEffect(() => {\n        const initSpinnerOdds = async () => {\n            let spinnerOdds = await getSpinner(auth.user.jwt, 1);\n            spinnerOdds.items = sortSpinnerOddsByChance(spinnerOdds);\n            setSpinner(spinnerOdds);\n        }\n\n        initSpinnerOdds();\n    }, [auth]);\n\n    return(\n        <Card>\n            <CardHeader title='Spinner Odds' avatar={<Redeem/>}/>\n            <CardContent>\n                <div className='h-60'>\n                    <SpinnerOddsChart spinner={spinner}/>\n                </div>\n            </CardContent>\n            <CardActions \n                disableSpacing\n                onClick={() => setExpandSpinnerOddsTable(!expandSpinnerOddsTable)}\n                sx={{cursor: 'pointer'}}\n            >\n                <p style={{fontSize: '14px', marginLeft: 'auto'}}>\n                    {expandSpinnerOddsTable ? 'Hide' : 'Show'} Details\n                </p>\n                <ExpandMore\n                    expand={expandSpinnerOddsTable}\n                    aria-expanded={expandSpinnerOddsTable}\n                    aria-label=\"show more\"\n                >\n                    <ExpandMoreIcon />\n                </ExpandMore>\n            </CardActions>\n            <Collapse in={expandSpinnerOddsTable} timeout=\"auto\" unmountOnExit>\n                <CardContent>\n                    <SpinnerOddsTable spinner={spinner} />\n                </CardContent>\n            </Collapse>\n        </Card> \n    )\n}","import { Avatar, Card, CardHeader, CardMedia, Typography } from \"@mui/material\";\nimport { Pack } from \"../interfaces/Pack\"\n\nfunction getPackImage(pack: Pack): string {\n    const primaryImage = pack.images.find(img => img.name === 'image');\n    if (primaryImage)\n        return primaryImage.url;\n    return pack.images[0].url;\n}\n\nexport default function StorePack({ pack }: { pack: Pack }) {\n    return(\n        <Card variant='outlined' sx={{width: '10em', height: '100%'}}>\n            <CardHeader \n                sx={{ height: '4em' }}\n                avatar={\n                    <Avatar variant='square' src={`${process.env.PUBLIC_URL}/packTypeIcons/${pack.acquireType[0]}.svg`}/>\n                }\n                title={\n                    <Typography variant=\"body1\" sx={{opacity: 1, fontSize: 12 }}>\n                        {pack.name}\n                    </Typography>\n                }\n            />\n            <CardMedia\n                sx={{ p: 2 }}\n                component='img'\n                height='140'\n                image={`https://cdn.epics.gg${getPackImage(pack)}`}\n                alt='No pack preview found'\n            />\n            <Typography variant=\"body2\" sx={{ p: 2, textAlign: 'center' }}>\n                Stock: {pack.inventoryCount}\n            </Typography>\n        </Card>\n    )\n}","import { Grid } from \"@mui/material\";\nimport { Pack } from \"../interfaces/Pack\";\nimport StorePack from \"./StorePack\";\n\n\nexport default function StorePackDisplay({ packs }: {packs: Pack[]}) {\n    return(\n        <Grid container spacing={1} justifyContent='center' padding={2}>\n            {packs.map(pack => (\n                <Grid item key={pack.id}> \n                    <StorePack pack={pack}/>\n                </Grid>\n            ))}\n        </Grid>\n    )\n}","import { MonetizationOn } from \"@mui/icons-material\";\nimport { Card, CardHeader, CardContent } from \"@mui/material\";\nimport { useEffect, useState } from \"react\";\nimport { getStorePacks } from \"../api/api\";\nimport { useAuth } from \"../App\";\nimport { Pack } from \"../interfaces/Pack\";\nimport StorePackDisplay from \"./StorePackDisplay\";\n\nfunction filterActivePacks(packs: Pack[]) {\n    const today = new Date();\n    return packs.filter(pack => {\n        if (pack.purchaseEnd !== undefined) {\n            if (new Date(pack.purchaseEnd) > today && pack.inventoryCount > 0)\n                return true;\n        }\n        return false;\n    })\n}\n\nfunction sortPacksByInventoryCount(packs: Pack[]) {\n    return packs.sort((a: Pack, b: Pack) => b.inventoryCount - a.inventoryCount)\n}\n\nexport default function PackStock() {\n    const auth = useAuth();\n    const [packs, setPacks] = useState([] as Pack[]);\n\n    useEffect(() => {\n        let mounted = true;\n\n        const initStorePacks = async () => {\n            const storePacks = await getStorePacks(auth.user.jwt, 1);\n            const activePacks = filterActivePacks(storePacks);\n            const sortedPacks = sortPacksByInventoryCount(activePacks);\n            if (mounted)\n                setPacks(sortedPacks);\n        }\n\n        initStorePacks();\n\n        return () => {\n            mounted = false;\n        }\n    }, [auth]);\n\n    return(\n        <Card>\n            <CardHeader title='Store Packs' avatar={<MonetizationOn/>}/>\n            <CardContent>\n                <StorePackDisplay packs={packs}/>\n            </CardContent>\n        </Card>\n    )\n}","import SpinnerOdds from \"./SpinnerOdds\";\nimport PackStock from \"./PackStock\";\nimport { Grid } from \"@mui/material\";\n\nexport default function Home() {\n    return(\n        <Grid container spacing={2} p={2}>\n            <Grid item lg={6} sm={12}>\n                <PackStock />\n            </Grid>\n            <Grid item lg={6} sm={12}>\n                <SpinnerOdds />\n            </Grid>\n        </Grid>\n    )\n}","import './AccountSelector.css';\nimport { useEffect, useRef, useState } from \"react\";\nimport { searchUsers } from \"../api/api\";\nimport { useAuth } from \"../App\";\nimport { UserSearchResult } from \"../interfaces/UserSearchResult\";\nimport BaseContainer from '../BaseComponents/BaseContainer';\nimport BaseButton from '../BaseComponents/BaseButton';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSearch } from '@fortawesome/free-solid-svg-icons';\n\ninterface AccountSelectorProps {\n    onUserSelect: (user: UserSearchResult) => void\n}\n\nexport default function AccountSelector(props: AccountSelectorProps) {\n    const [userSearchInput, setUserSearchInput] = useState('');\n    const [userSearchResults, setUserSearchResults] = useState([] as UserSearchResult[]);\n    const [selectedUser, setSelectedUser] = useState({} as UserSearchResult);\n    const [showSearchResultsMenu, setShowSearchResultsMenu] = useState(false);\n    const auth = useAuth();\n\n    async function handleUserSearch() {\n        const searchResults = await searchUsers(auth.user.jwt, userSearchInput);\n        setUserSearchResults(searchResults);\n    }\n\n    function handleUserSelection(user: UserSearchResult) {\n        setSelectedUser(user);\n        props.onUserSelect(user);\n        setShowSearchResultsMenu(false);\n    }\n\n    useEffect(() => {\n        if (userSearchResults.length > 0) {\n            setShowSearchResultsMenu(true);\n        } else {\n            setShowSearchResultsMenu(false);\n        }\n    }, [userSearchResults])\n\n    const inputField: any = useRef(null);\n    useEffect(() => window.addEventListener('click', evt => {\n        if (inputField.current && inputField.current.contains(evt.target) && userSearchResults.length > 0)\n            setShowSearchResultsMenu(true);\n        else\n            setShowSearchResultsMenu(false);\n    }))\n\n    return(\n        <BaseContainer title='Select Account' description='This is where your items will be sent.'>\n            <div className='accSelectorContainer'>\n                <form onSubmit={handleUserSearch} className='searchForm'>\n                    <input\n                        autoComplete='off'\n                        ref={inputField}\n                        id='userSearchInput'\n                        className='searchInput'\n                        placeholder='Search users...'\n                        onChange={evt => {\n                            setUserSearchInput(evt.target.value);\n                        }}\n                    />\n                    {showSearchResultsMenu ? \n                        <ul className='dropdown'>\n                            {userSearchResults.map((user: UserSearchResult) => (\n                                <li key={user.id} className='dropdownItem' onClick={() => handleUserSelection(user)}>\n                                    {user.username}\n                                </li>\n                            ))}\n                        </ul>\n                    : <></>}\n                    <BaseButton type='submit' onClick={handleUserSearch} className='userSearchBtn'>\n                        <FontAwesomeIcon icon={faSearch}/>\n                    </BaseButton>\n                </form>\n                {selectedUser.id ? \n                    <div className='selectedUser'>\n                        <img\n                            className='avatar'\n                            src={`https://cdn.epics.gg${selectedUser.avatar}`}\n                            alt='User Avatar'\n                        />\n                        <p>{selectedUser.username}</p>\n                    </div>\n                : <p className='infoText'>No user selected.</p>}\n            </div>\n        </BaseContainer>\n    )\n}","import { ReactNode, useEffect, useState } from \"react\"\nimport './ProgressBar.css'\n\ntype Props = {\n    max: number\n    progress: number\n    children?: ReactNode\n    className?: string\n}\n\nexport default function ProgressBar({max, progress, children, className}: Props) {\n    const [barWidth, setBarWidth] = useState(`${(progress/max)*100}`);\n    useEffect(() => {\n        setBarWidth(`${(progress/max)*100}%`);\n    }, [max, progress])\n\n    return(\n        <>\n        <div className={`progressContainer ${className}`}>\n            <div style={{width: barWidth}} id='progressBar'>\n                {children}\n            </div>\n        </div>\n        </>\n    )\n}","import { MouseEventHandler } from \"react\";\nimport './BaseCheckbox.css';\n\ntype Props = {\n    type: 'checkbox' | 'radio'\n    label: string\n    name?: string\n    onChange: MouseEventHandler<HTMLInputElement>\n}\n\nexport default function BaseCheckbox({type, onChange, label, name}: Props) {\n    return(\n        <label key={label} className=\"checkbox\" htmlFor={`check-${label}`}>\n            <input \n                id={`check-${label}`}\n                type={type}\n                defaultChecked\n                onClick={onChange}\n                value={label}\n                name={name}\n            />\n            {label}\n        </label>\n    )\n}","import BaseCheckbox from \"../BaseComponents/BaseCheckbox\";\nimport BaseContainer from \"../BaseComponents/BaseContainer\";\nimport './FilterSelector.css';\n\ntype Props = {\n    onChange: Function\n}\n\nexport default function FilterSelector({onChange}: Props) {\n    const seasons = [\"Founders Edition\", \"2018\", \"2019\", \"2020\", \"2021\"];\n\n    function handleSeasonSelect() {\n        let inputs: HTMLInputElement[] = Array.from(document.querySelectorAll('input[type=\"checkbox\"]:checked'));\n        onChange(inputs.map((input: HTMLInputElement) => input.value));\n    }\n\n    return(\n        <BaseContainer title='Filter Seasons' description='Change which Seasons you want to include in the transfer.'>\n            <div className='seasonsContainer'>\n                {seasons.map(season => (\n                    <BaseCheckbox\n                        key={season}\n                        type='checkbox'\n                        label={season}\n                        onChange={handleSeasonSelect}\n                    />\n                //     <label key={season} className=\"checkbox\">\n                //         <input \n                //             type=\"checkbox\" \n                //             defaultChecked\n                //             onChange={handleSeasonSelect}\n                //             value={season}\n                //             name={season}\n                //         />\n                //         {season}\n                //   </label>\n                ))}\n            </div>\n        </BaseContainer>\n    )\n}","import BaseCheckbox from \"../BaseComponents/BaseCheckbox\";\nimport BaseContainer from \"../BaseComponents/BaseContainer\";\nimport './ModeSwitcher.css';\n\ntype Props = {\n    onChange: Function\n}\n\nexport enum TransferMode {\n    SEND,\n    ACCEPT\n}\n\nexport default function ModeSwitcher({onChange}: Props) {\n    function handleModeSelect(evt: any) {\n        onChange(evt.target.value === 'Send' ? TransferMode.SEND : TransferMode.ACCEPT);\n    }\n\n    return(\n        <BaseContainer title='Change Mode' description='Do you want to send or accept Trades?'>\n            <div className='modeContainer'>\n                <BaseCheckbox type='radio' onChange={handleModeSelect} label='Send' name='mode'/>\n                <BaseCheckbox type='radio' onChange={handleModeSelect} label='Accept' name='mode'/>\n            </div>\n        </BaseContainer>\n    )\n}","import { useCallback, useEffect, useState } from \"react\";\nimport { getIncomingTrades } from \"../api/api\";\nimport { useAuth } from \"../App\";\nimport BaseContainer from \"../BaseComponents/BaseContainer\";\nimport { Trade } from \"../interfaces/Trade\";\n\ntype Props = {\n    user: string\n}\n\nexport default function TradeOverview({user}: Props) {\n    const defaultDescription = 'Please select a user first.';\n    const [description, setDescription] = useState(defaultDescription);\n    const [trades, setTrades] = useState([] as Trade[]);\n    const [loading, setLoading] = useState(false);\n    const auth = useAuth();\n\n    const getTrades = useCallback(async () => {\n        setLoading(true);\n        const newTrades: Trade[] = await getIncomingTrades(auth.user.jwt, 1, auth.user.id);\n        setTrades(newTrades);\n        setLoading(false);\n    }, [auth]);\n\n    const handleUserSelect = useCallback(() => {\n        setDescription(`Confirm to accept all Trades from ${user}`) \n        getTrades();\n    }, [user, getTrades]);\n\n    useEffect(() => {\n        user \n            ? handleUserSelect()\n            : setDescription(defaultDescription);\n    }, [user, handleUserSelect])\n\n    return(\n        <BaseContainer title='Accept Trades' description={description} loading={loading}>\n            <div>\n                <h3>Incoming Trades:</h3>\n                <p>{trades.length}</p>\n            </div>\n        </BaseContainer>\n    )\n}","import './AccountTransfer.css';\nimport { useEffect, useState } from \"react\";\nimport { UserSearchResult } from \"../interfaces/UserSearchResult\";\nimport AccountSelector from \"./AccountSelector\";\nimport { getAllItemIds, getUserCollections } from '../api/api';\nimport { useAuth } from '../App';\nimport { UserCollection } from '../interfaces/UserCollection';\nimport BaseButton from '../BaseComponents/BaseButton';\nimport ProgressBar from '../BaseComponents/ProgressBar';\nimport FilterSelector from './FilterSelector';\nimport ModeSwitcher, { TransferMode } from './ModeSwitcher';\nimport TradeOverview from './TradeOverview';\n\ninterface TradeItem {\n    id: number\n    type: 'card' | 'sticker'\n}\n\nexport default function AccountTransfer() {\n    const [transferMode, setTransfermode] = useState(TransferMode.SEND);\n    const [selectedUser, setSelectedUser] = useState({} as UserSearchResult);\n    const [tradeItems, setTradeItems] = useState([] as TradeItem[]);\n    const [collectionProgress, setCollectionProgress] = useState(0);\n    const [totalCollections, setTotalCollections] = useState(0);\n    const [allowedSeasons, setAllowedSeasons] = useState([] as string[]);\n    const auth = useAuth();\n\n    function handleUserSelect(user: UserSearchResult) {\n        setSelectedUser(user);\n    }\n\n    async function scanUserItems() {\n        const collections = await getUserCollections(auth.user.jwt, auth.user.id, 1);\n        setTotalCollections(collections.length);\n        setTradeItems([]);\n        setCollectionProgress(0);\n        const items: TradeItem[] = [];\n        collections.forEach(async (coll: UserCollection) => {\n            if (coll.count === 0 || !allowedSeasons.some((season: string) => coll.collection.properties.seasons.includes(season))) {\n                setCollectionProgress(c => c + 1);\n                return;\n            }\n            for (const type of coll.collection.properties.entity_types) {\n                if (type !== 'card' && type !== 'sticker')\n                    continue;\n                const ids = await getAllItemIds(auth.user.jwt, auth.user.id, coll.collection.id, type, 1);\n                for (const id of ids) {\n                    items.push({id: id, type: type})\n                }\n            }\n            setTradeItems([...tradeItems, ...items]);\n        })\n    }\n\n    function handleSeasonSelect(seasons: string[]) {\n        setAllowedSeasons(seasons);\n    }\n\n    function handleModeSelect(mode: TransferMode) {\n        setTransfermode(mode);\n    }\n\n    useEffect(() => setCollectionProgress(c => c + 1), [tradeItems])\n\n    return(\n        <div className='accTransferContainer'>\n            <ModeSwitcher onChange={handleModeSelect}/>\n            {totalCollections > 0 && collectionProgress < totalCollections ?\n                <ProgressBar max={totalCollections} progress={collectionProgress}/>\n            : <></>}\n            <AccountSelector onUserSelect={user => handleUserSelect(user)}/>\n            {transferMode === TransferMode.SEND\n                ? <>\n                    <FilterSelector onChange={handleSeasonSelect}/>\n                    <BaseButton onClick={() => scanUserItems()}>Start Transfer</BaseButton>\n                </>\n                : <>\n                    <TradeOverview user={selectedUser.username} />\n                </>\n            }\n            <p>{tradeItems.length}</p>\n        </div>\n    )\n}","import { IconProp } from \"@fortawesome/fontawesome-svg-core\";\nimport { faBoxOpen, faExchangeAlt, faFire, faGamepad, faHome, faSearch, faTags, faUsers } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { useRef } from \"react\";\nimport { useHistory } from \"react-router\";\nimport './Navbar.css';\n\ninterface Route {\n    name: string\n    icon: IconProp\n    isActive: boolean\n    path: string\n    disabled: boolean\n}\n\n\nexport default function Navbar() {\n    const history = useHistory();\n    const navToggleRef = useRef<HTMLInputElement>(null);\n\n    const isActiveRoute = (routeName: string) => {\n        return routeName === history.location.pathname;\n    }\n\n    const routes: Route[] = [\n        {\n            name: 'Home', \n            icon: faHome,\n            isActive: isActiveRoute('/'), \n            path: '/',\n            disabled: false\n        },\n        {\n            name: 'Mint Search', \n            icon: faSearch, \n            isActive: isActiveRoute('/mintsearch'), \n            path: '/mintsearch',\n            disabled: true\n        },\n        {\n            name: 'Mass List', \n            icon: faTags, \n            isActive: isActiveRoute('/masslist'), \n            path: '/masslist',\n            disabled: true\n        },\n        {\n            name: 'Rush Games', \n            icon: faGamepad, \n            isActive: isActiveRoute('/rushgames'), \n            path: '/rushgames',\n            disabled: true\n        },\n        {\n            name: 'Rush Team Builder', \n            icon: faUsers, \n            isActive: isActiveRoute('/rushteam'), \n            path: '/rushteam',\n            disabled: true\n        },\n        {\n            name: 'Account Transfer', \n            icon: faExchangeAlt, \n            isActive: isActiveRoute('/accounttransfer'), \n            path: '/accounttransfer',\n            disabled: false\n        },\n        {\n            name: 'Pack Opener', \n            icon: faBoxOpen, \n            isActive: isActiveRoute('/packopener'), \n            path: '/packopener',\n            disabled: true\n        },\n        {\n            name: 'Showcase',\n            icon: faFire,\n            isActive: isActiveRoute('/showcase'),\n            path: '/showcase',\n            disabled: false\n        }\n    ]\n\n    const handleNavButtonClick = (route: Route) => {\n        const from: any = history.location.state || { from: { pathname: '/' } };\n        history.replace(from);\n        history.push(route.path);\n        if (navToggleRef.current)\n            navToggleRef.current.checked = false;\n    }\n\n    return(\n        <header>\n            <input ref={navToggleRef} type='checkbox' id='navToggle' className='navToggle'/>\n            <nav>\n                <ul>\n                    {routes.map((route: Route) => (\n                        <li key={route.path} onClick={() => handleNavButtonClick(route)} title={route.name}>\n                            <button >\n                                {route.icon \n                                    ? \n                                    <div className='routeContainer'>\n                                        <FontAwesomeIcon \n                                            className={route.isActive ? 'activeRoute' : ''} \n                                            icon={route.icon} size='lg'\n                                        /> \n                                        <h2 className='routeLabel'>{route.name}</h2>\n                                    </div>\n                                    : route.name\n                                }\n                            </button>\n                        </li>\n                    ))}\n                </ul>\n            </nav>\n            <label htmlFor='navToggle' className='navToggleLabel'>\n                <span></span>\n            </label>\n        </header>\n    )\n}","import { ForwardedRef, forwardRef } from \"react\";\nimport { Card } from \"../interfaces/Card\"\nimport './CardImage.css';\n\ntype Props = {\n    id?: string\n    card: Card\n    style?: Object\n}\n\nexport default forwardRef((props: Props, ref: ForwardedRef<HTMLImageElement>) => {\n    return (\n        <img {...props.style} ref={ref} src={props.card.images.size402} className='cardImage' alt='Showcase Item'/>\n    )\n})","import { useSortable } from \"@dnd-kit/sortable\";\nimport { CSS } from \"@dnd-kit/utilities\";\nimport { Card } from \"../interfaces/Card\";\nimport CardImage from \"./CardImage\";\nimport './SortableItem.css';\n\ntype Props = {\n    id: string\n    card: Card\n}\n\nexport default function SortableItem(props: Props) {\n    const {attributes, listeners, setNodeRef, transform, transition} = useSortable({\n        id: props.id\n    });\n\n    const style = {\n        transform: CSS.Transform.toString(transform),\n        transition\n    };\n\n    return(\n        <div style={style} ref={setNodeRef} className='sortableItemContainer'>\n            <CardImage card={props.card} />\n            {/* <button {...listeners} className='dragHandle'></button> */}\n            <div {...attributes} {...listeners} className='dragHandle'>\n                <div className='dot'/>\n            </div>\n        </div>\n    )\n}","import { useEffect, useState } from \"react\";\nimport { DndContext, DragEndEvent, DragOverlay, DragStartEvent, KeyboardSensor, PointerSensor, useSensor, useSensors, closestCenter } from \"@dnd-kit/core\";\nimport { changeShowcase, getAllShowcases } from \"../api/api\";\nimport { useAuth } from \"../App\"\nimport BaseContainer from \"../BaseComponents/BaseContainer\";\nimport { Showcase } from \"../interfaces/Showcase\";\nimport './FancyShowcase.css';\nimport SortableItem from \"./SortableItem\";\nimport CardImage from \"./CardImage\";\nimport { arrayMove, SortableContext, sortableKeyboardCoordinates } from \"@dnd-kit/sortable\";\nimport { Card } from \"../interfaces/Card\";\nimport BaseButton from \"../BaseComponents/BaseButton\";\nimport { ShowcasePayload } from \"../interfaces/ShowcasePayload\";\n\ninterface ObjectLiteral {\n    [key: string]: Showcase\n}\n\nexport default function FancyShowcase() {\n    const [showcases, setShowcases] = useState<ObjectLiteral>({});\n    const [hasShowcaseChanges, setHasShowcaseChanges] = useState<boolean>(false);\n    const [activeElement, setActiveElement] = useState<Card | null>(null);\n    const divider = ':;:';\n    const auth = useAuth();\n\n    const sensors = useSensors(\n        useSensor(PointerSensor),\n        useSensor(KeyboardSensor, {\n            coordinateGetter: sortableKeyboardCoordinates,\n        })\n    );\n\n    useEffect(() => {\n        const getShowcase = async () => {\n            let res: Showcase[] = await getAllShowcases(auth.user.jwt, auth.user.id);\n            for (const shelve of res) {\n                setShowcases(s => ({...s, [shelve.name]: shelve}))\n            }\n        }\n        getShowcase();\n    }, [auth]);\n\n    function handleDragEnd(event: DragEndEvent) {\n        const {active, over} = event;\n        \n        if (!over)\n            return;\n\n        if (active.id === over.id)\n            return;\n        \n        const [activeShowcaseKey, activeItemId] = active.id.split(divider);\n        const [overShowcaseKey, overItemId] = over.id.split(divider);\n        const oldIndex = showcases[activeShowcaseKey].cards.findIndex(el => el.id.toString() === activeItemId);\n        const newIndex = showcases[overShowcaseKey].cards.findIndex(el => el.id.toString() === overItemId);\n        \n        let oldShowcase = showcases[activeShowcaseKey];\n        if (activeShowcaseKey === overShowcaseKey) {\n                oldShowcase.cards = arrayMove(oldShowcase.cards, oldIndex, newIndex);\n                setShowcases(s => ({...s, [overShowcaseKey]: oldShowcase}));\n        } else {\n            let newShowcase = showcases[overShowcaseKey];\n            newShowcase.cards.splice(newIndex, 0, oldShowcase.cards[oldIndex]);\n            oldShowcase.cards.splice(oldIndex, 1);\n            setShowcases(s => ({...s, [activeShowcaseKey]: oldShowcase, [overShowcaseKey]: newShowcase}));\n        }\n        setHasShowcaseChanges(true);\n\n        setActiveElement(null);\n    }\n\n    function handleDragStart(event: DragStartEvent) {\n        const {active} = event;\n        const element = getItemById(active.id);\n        if (element)\n            setActiveElement(element);\n    }\n\n    function getItemById(id: string) {\n        const [showcaseKey, itemId] = id.split(divider);\n        return showcases[showcaseKey].cards.find(el => el.id.toString() === itemId);\n    }\n\n    async function applyShowcaseChanges() {\n        for (const showcase of Object.values(showcases)) {\n            const payload = getShowcasePayload(showcase);\n            await changeShowcase(auth.user.jwt, payload);\n        }\n        setHasShowcaseChanges(false);\n    }\n\n    function getShowcasePayload(showcase: Showcase): ShowcasePayload {\n        return {\n            id: showcase.id,\n            main: showcase.main,\n            name: showcase.name,\n            order: showcase.order,\n            visible: showcase.visible,\n            cardIds: showcase.cards.map(card => card.id),\n            stickerIds: showcase.stickers.map(sticker => sticker.id)\n        };\n    }\n\n    return(\n        <div className='showcasePage'>\n            {hasShowcaseChanges ? <div className='btnRow'>\n                <p>You have unsaved changes!</p>\n                <BaseButton text='Apply Changes' onClick={applyShowcaseChanges}/>\n            </div> : null}\n            <DndContext onDragEnd={handleDragEnd} onDragStart={handleDragStart} sensors={sensors} collisionDetection={closestCenter}>\n                {Object.entries(showcases).map(([title, showcase]) => (\n                    <BaseContainer title={title} key={title}>\n                            <SortableContext items={showcase.cards.map(c => `${title}${divider}${c.id}`)}>\n                                <div className='showcaseContainer'>\n                                    {showcase.cards?.map((card: Card) => (\n                                        <SortableItem card={card} id={`${title}${divider}${card.id}`} key={card.id} />\n                                    ))}\n                                </div>\n                            </SortableContext>\n                            <DragOverlay dropAnimation={{ easing: 'ease', duration: 250, dragSourceOpacity: 1 }}>\n                                {activeElement ? <CardImage id={`${title}${divider}${activeElement.id}`} card={activeElement} /> : null}\n                            </DragOverlay>\n                    </BaseContainer>\n                ))}\n            </DndContext>\n        </div>\n    )\n}","import './App.css';\nimport './index.css';\nimport Login from './Login/Login';\nimport Home from './Home/Home';\nimport {\n  HashRouter as Router,\n  Route,\n  Switch,\n  Redirect\n} from 'react-router-dom';\nimport { useContext, createContext, useState } from \"react\";\nimport { User } from './interfaces/User';\nimport AccountTransfer from './AccountTransfer/AccountTransfer';\nimport Navbar from './Navigation/Navbar';\nimport FancyShowcase from './FancyShowcase/FancyShowcase';\n\ninterface Auth {\n  user: User\n  signin: (user: User) => void\n  signout: () => void\n}\n\nconst authContext = createContext({user: {} as User, signin: (user: User) => {}, signout: () => {}} as Auth);\n\nfunction ProvideAuth({ children }: any) {\n  const auth = useProvideAuth();\n  return (\n    <authContext.Provider value={auth}>\n      {children}\n    </authContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  return useContext(authContext);\n}\n\nfunction useProvideAuth() {\n  const [user, setUser] = useState({} as User);\n\n  const signin = (user: any) => {\n    let newUser: User = user.user;\n    newUser.jwt = user.jwt;\n    setUser(newUser);\n  };\n\n  const signout = () => {\n    setUser({} as User);\n  };\n\n  return {\n    user,\n    signin,\n    signout\n  } as Auth;\n}\n\nfunction PrivateRoute({ children, ...rest }: any) {\n  let auth = useAuth();\n  return (\n    <Route\n      {...rest}\n      render={({ location }) =>\n        auth.user.jwt ? (\n          <>\n            <Navbar/>\n            <div className='componentContainer'>\n              {children}\n            </div>\n          </>\n        ) : (\n          <Redirect\n            to={{\n              pathname: \"/login\",\n              state: { from: location }\n            }}\n          />\n        )\n      }\n    />\n  );\n}\n\nfunction App() {\n  return (\n    <ProvideAuth>\n      <Router>\n        <Switch>\n          <Route path='/login' exact render={() => <Login/>}/>\n          <PrivateRoute path='/accounttransfer'>\n            <AccountTransfer/>\n          </PrivateRoute>\n          <PrivateRoute path='/showcase'>\n            <FancyShowcase/>\n          </PrivateRoute>\n          <PrivateRoute path='/'>\n            <Home/>\n          </PrivateRoute>\n        </Switch>\n      </Router>\n    </ProvideAuth>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createTheme } from '@mui/material';\n\nexport const theme = createTheme({\n  palette: {\n    mode: 'dark',\n    primary: {\n      main: '#2bc7c4',\n    },\n    secondary: {\n      main: '#f50057',\n    },\n  },\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ThemeProvider } from '@mui/system';\nimport { theme } from './theme';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}