{"version":3,"sources":["api/api.ts","BaseComponents/BaseButton.tsx","BaseComponents/BaseContainer.tsx","Login/Login.tsx","Home/SpinnerOddsTable.tsx","Home/SpinnerOddsChart.tsx","Home/SpinnerOdds.tsx","Home/StorePack.tsx","Home/StorePackDisplay.tsx","Home/PackStock.tsx","Navigation/Navbar.tsx","Home/Home.tsx","AccountTransfer/AccountSelector.tsx","BaseComponents/ProgressBar.tsx","AccountTransfer/FilterSelector.tsx","AccountTransfer/AccountTransfer.tsx","App.tsx","reportWebVitals.ts","theme.ts","index.tsx"],"names":["http","axiosRateLimit","axios","create","maxRequests","perMilliseconds","login","credentials","a","method","data","response","status","getStorePacks","jwt","categoryId","packs","page","headers","params","length","el","pack","push","getSpinner","searchUsers","username","getUserCollections","userId","getAllItemIds","collectionId","itemType","ids","template","cardIds","stickerIds","BaseButton","text","children","type","className","onClick","BaseContainer","title","description","Login","useState","email","password","creds","setCreds","hideLoginInfo","toggleLoginInfo","loading","setLoading","history","useHistory","location","useLocation","auth","useAuth","event","preventDefault","user","from","state","pathname","signin","replace","onSubmit","id","autoComplete","placeholder","onChange","e","target","value","required","hidden","rel","href","SpinnerOddsTable","spinner","TableContainer","Table","TableHead","TableRow","TableCell","TableBody","items","map","item","name","chance","SpinnerOddsChart","spinnerOdds","setSpinnerOdds","useEffect","odds","options","chart","stacked","foreColor","background","theme","mode","plotOptions","bar","horizontal","stroke","width","colors","xaxis","categories","labels","formatter","val","max","yaxis","undefined","tooltip","y","fill","opacity","legend","position","horizontalAlign","noData","grid","show","height","series","ExpandMore","styled","props","expand","other","IconButton","transform","marginLeft","transition","transitions","duration","shortest","sortSpinnerOddsByChance","sort","b","SpinnerOdds","setSpinner","expandSpinnerOddsTable","setExpandSpinnerOddsTable","initSpinnerOdds","Card","CardHeader","avatar","Redeem","CardContent","CardActions","disableSpacing","sx","cursor","style","fontSize","Collapse","in","timeout","unmountOnExit","getPackImage","primaryImage","images","find","img","url","StorePack","variant","Avatar","src","process","acquireType","Typography","CardMedia","p","component","image","alt","textAlign","inventoryCount","StorePackDisplay","Grid","container","spacing","justifyContent","padding","filterActivePacks","today","Date","filter","purchaseEnd","sortPacksByInventoryCount","PackStock","setPacks","mounted","storePacks","activePacks","sortedPacks","initStorePacks","MonetizationOn","Navbar","isActiveRoute","routeName","routes","icon","Home","isActive","path","disabled","Search","Sell","SportsEsports","Group","CompareArrows","Restaurant","handleNavButtonClick","route","menuAnchor","setMenuAnchor","openMenu","Boolean","Button","AppBar","Toolbar","flexGrow","color","evt","currentTarget","Menu","anchorEl","open","onClose","MenuItem","xs","lg","sm","AccountSelector","userSearchInput","setUserSearchInput","userSearchResults","setUserSearchResults","selectedUser","setSelectedUser","showSearchResultsMenu","setShowSearchResultsMenu","handleUserSearch","searchResults","inputField","useRef","window","addEventListener","current","contains","ref","onUserSelect","handleUserSelection","faSearch","ProgressBar","progress","barWidth","setBarWidth","FilterSelector","handleSeasonSelect","inputs","Array","document","querySelectorAll","input","season","defaultChecked","AccountTransfer","tradeItems","setTradeItems","collectionProgress","setCollectionProgress","totalCollections","setTotalCollections","setAllowedSeasons","collections","forEach","coll","count","collection","properties","entity_types","c","handleUserSelect","seasons","scanUserItems","authContext","createContext","signout","ProvideAuth","setUser","newUser","useProvideAuth","Provider","useContext","PrivateRoute","rest","render","to","App","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","createTheme","palette","primary","main","secondary","ReactDOM","StrictMode","ThemeProvider","getElementById"],"mappings":"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","file":"static/js/main.2c4c05fd.chunk.js","sourcesContent":["import axios from \"axios\";\nimport axiosRateLimit from \"axios-rate-limit\";\nimport { UserCredentials } from \"../interfaces/UserCredentials\";\nimport { Pack } from \"../interfaces/Pack\";\nimport { Spinner } from \"../interfaces/Spinner\";\nimport { User } from \"../interfaces/User\";\nimport { UserSearchResult } from \"../interfaces/UserSearchResult\";\nimport { UserCollection } from \"../interfaces/UserCollection\";\n\nconst http = axiosRateLimit(axios.create(), {maxRequests: 130, perMilliseconds: 60000})\n\nexport async function login(credentials: UserCredentials): Promise<User> {\n    const response: any = await http('https://api.epics.gg/api/v1/auth/login', {\n        method: 'POST',\n        data: credentials\n    })\n\n    if (response.status === 200) \n        return response.data.data as User;\n    \n    return {} as User;\n}\n\nexport async function getStorePacks(jwt: string, categoryId: number): Promise<Pack[]> {\n    let packs: Pack[] = [];\n    let page = 1;\n    while (true) {\n        const response: any = await http('https://api.epics.gg/api/v1/packs', {\n            method: 'GET',\n            headers: {\n                'x-user-jwt': jwt\n            },\n            params: {\n                'categoryId': categoryId,\n                'page': page\n            }\n        })\n        page += 1;\n\n        if (response.status !== 200)\n            break;\n        \n        if (response.data.data.length === 0)\n            break;\n        \n        for (const el of response.data.data) {\n            const pack = el as Pack;\n            packs.push(pack);\n        }\n    }\n    return packs;\n}\n\nexport async function getSpinner(jwt: string, categoryId: number): Promise<Spinner> {\n    const response: any = await http('https://api.epics.gg/api/v1/spinner', {\n        method: 'GET',\n        headers: {\n            'x-user-jwt': jwt\n        },\n        params: {\n            'categoryId': categoryId\n        }\n    });\n\n    if (response.status !== 200)\n        return {} as Spinner;\n    \n    return response.data.data as Spinner;\n}\n\nexport async function searchUsers(jwt: string, username: string): Promise<UserSearchResult[]> {\n    const response: any = await http('https://api.epics.gg/api/v1/users/search', {\n        method: 'GET',\n        headers: {\n            'x-user-jwt': jwt\n        },\n        params: {\n            'username': username\n        }\n    });\n\n    if (response.status !== 200)\n        return [];\n    \n    return response.data.data as UserSearchResult[];\n}\n\nexport async function getUserCollections(jwt: string, userId: number, categoryId: number): Promise<UserCollection[]> {\n    const response: any = await http(`https://api.epics.gg/api/v1/collections/users/${userId}/user-summary`, {\n        headers: {\n            'x-user-jwt': jwt\n        },\n        params: {\n            'categoryId': categoryId\n        }\n    });\n\n    if (response.status !== 200)\n        return [];\n    \n    return response.data.data as UserCollection[];\n}\n\nexport async function getAllItemIds(jwt: string, userId: number, collectionId: number, itemType: 'card'|'sticker', categoryId: number): Promise<number[]> {\n    const response: any = await http(`https://api.epics.gg/api/v1/collections/users/${userId}/${itemType}ids`, {\n        headers: {\n            'x-user-jwt': jwt\n        },\n        params: {\n            'collectionId': collectionId,\n            'categoryId': categoryId\n        }\n    })\n\n    if (response.status !== 200)\n        return [];\n    \n    let ids: number[] = []\n    if (itemType === 'card') {\n        for (const template of response.data.data) {\n            ids = [...ids, ...template.cardIds];\n        }\n    } else {\n        for (const template of response.data.data) {\n            ids = [...ids, ...template.stickerIds];\n        }\n    }\n\n    return ids;\n}\n","import './BaseButton.css';\nimport { ReactNode } from \"react\"\n\ntype Props = {\n    text?: string\n    children?: ReactNode\n    type?: 'button' | 'submit' | 'reset'\n    className?: string\n    onClick?: Function\n}\n\nexport default function BaseButton({text, children, type, className, onClick}: Props) {\n    function handleClick() {\n        if (onClick)\n            onClick();\n    }\n\n    return(\n        <button className={`baseBtn ${className}`} type={type} onClick={handleClick}>\n            <p>{text}</p>\n            {children}\n        </button>\n    )\n}","import './BaseContainer.css';\nimport { ReactNode } from \"react\"\n\ntype Props = {\n    title?: string\n    description?: string\n    className?: string\n    children?: ReactNode\n}\n\nexport default function BaseContainer({title, description, className, children}: Props) {\n    return(\n        <div className={`baseContainer ${className}`}>\n            {title ?\n                <h2 className='baseContainerTitle'>\n                    {title}\n                </h2>\n            : <></>}\n            {description ? \n                <p className='baseContainerDescription'>\n                    {description}\n                </p>\n            : <></>}\n            {title ? \n                <div className='dividerLine'/>\n            : <></>}\n            <div className='containerContents'>\n                {children}\n            </div>\n        </div>\n    )\n}","import { useState } from \"react\"\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport { login } from \"../api/api\";\nimport { useAuth } from '../App';\nimport { User } from \"../interfaces/User\";\nimport BaseButton from \"../BaseComponents/BaseButton\";\nimport BaseContainer from \"../BaseComponents/BaseContainer\";\nimport './Login.css';\n\nexport default function Login() {\n    const [creds, setCreds] = useState({email: '', password: ''});\n    const [hideLoginInfo, toggleLoginInfo] = useState(true);\n    const [loading, setLoading] = useState(false);\n    const history = useHistory();\n    const location = useLocation();\n    const auth = useAuth();\n\n    async function handleLogin(event: React.FormEvent) {\n        event.preventDefault();\n        setLoading(true);\n        const user: User = await login(creds);\n        if (user.jwt) {\n            const from: any = location.state || { from: { pathname: '/' } };\n            auth.signin(user);\n            history.replace(from);\n            history.push('/');\n        }\n    }\n\n    return(\n        <div className='flex flex-col items-center justify-center py-12 px-12 max-w-xl m-auto'>\n            <h1 className='mb-2 text-xl text-center'>\n                Welcome to Epics Toolkit v2\n            </h1>\n            <BaseContainer className={loading ? 'loading' : ''} title='Login' description='Log in with your Epics Account.'>\n                <form className='space-y-4 mb-4' onSubmit={handleLogin}>\n                    <div>\n                        <input\n                            id='email'\n                            type='email'\n                            autoComplete='email'\n                            placeholder='E-Mail'\n                            className='loginInput'\n                            onChange={e => setCreds({...creds, email: e.target.value})}\n                            value={creds.email}\n                            required\n                        />\n                    </div>\n                    <div>\n                        <input \n                            id='password' \n                            type='password' \n                            autoComplete='current-password' \n                            placeholder='Password'\n                            className='loginInput'\n                            onChange={e => setCreds({...creds, password: e.target.value})}\n                            value={creds.password}\n                            required\n                        />\n                    </div>\n                    <div className='mt-6'>\n                        <BaseButton type='submit'>\n                            Log In\n                        </BaseButton>\n                    </div>\n                </form>\n                <div className='text-center'>\n                    <span className='infoTextLink' onClick={() => toggleLoginInfo(!hideLoginInfo)}>\n                        Why is this needed?\n                    </span>\n                    <p hidden={hideLoginInfo}>\n                        Your login is needed to send requests to the Epics API.\n                        Your login credentials will never be saved!\n                        All my code can be found on my&nbsp;\n                        <a target=\"_blank\" rel=\"noopener noreferrer\"  href=\"https://github.com/Fynngin/Epics-React-Toolkit\">GitHub</a>\n                        , if you want to verify yourself.\n                    </p>\n                </div>\n            </BaseContainer>\n        </div>\n    )\n}","import { Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from \"@mui/material\";\nimport { Spinner } from \"../interfaces/Spinner\";\n\nexport default function SpinnerOddsTable({spinner}: {spinner: Spinner}) {\n    return(\n        <TableContainer>\n            <Table>\n                <TableHead>\n                    <TableRow>\n                        <TableCell>Item</TableCell>\n                        <TableCell>Chance</TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {spinner.items.map(item => (\n                        <TableRow key={item.id}>\n                            <TableCell>{item.name}</TableCell>\n                            <TableCell>{item.chance}</TableCell>\n                        </TableRow>\n                    ))}\n                </TableBody>\n            </Table>\n        </TableContainer>\n    )\n}","import { useEffect, useState } from \"react\";\nimport ReactApexChart from \"react-apexcharts\";\nimport { Spinner } from \"../interfaces/Spinner\";\n\ninterface ItemChance {\n    name: string\n    data: number[]\n}\n\nexport default function SpinnerOddsChart({ spinner }: {spinner: Spinner}) {\n    const [spinnerOdds, setSpinnerOdds] = useState<ItemChance[]>([]);\n\n    useEffect(() => {\n        if (spinner.items) {\n            const odds: ItemChance[] = spinner.items.map(item => {\n                return {name: item.name, data: [item.chance]} as ItemChance;\n            })\n            setSpinnerOdds(odds);\n        }\n    }, [spinner])\n\n    const options: any = {\n        chart: {\n            type: 'bar',\n            stacked: true,\n            foreColor: '#fff',\n            background: 'transparent',\n        },\n        theme: {\n            mode: 'dark'\n        },\n        plotOptions: {\n            bar: {\n                horizontal: true,\n            },\n        },\n        stroke: {\n            width: 1,\n            colors: ['#fff']\n        },\n        xaxis: {\n            categories: [''],\n            labels: {\n                formatter: (val: any) => {\n                    return val + \"%\"\n                }\n            },\n            max: 100\n        },\n        yaxis: {\n            title: {\n                text: undefined\n            }\n        },\n        tooltip: {\n            theme: 'dark',\n            y: {\n                formatter: (val: any) => {\n                    return val + \"%\"\n                }\n            }\n        },\n        fill: {\n            opacity: 1\n        },\n        legend: {\n            position: 'top',\n            horizontalAlign: 'left'\n        },\n        noData: {\n            text: 'Spinner unavailable.'\n        },\n        grid: {\n            show: false\n        }\n    }\n\n    return(\n        <ReactApexChart height='100%' options={options} type='bar' series={spinnerOdds} />\n    )\n}","import SpinnerOddsTable from \"./SpinnerOddsTable\";\nimport SpinnerOddsChart from \"./SpinnerOddsChart\";\nimport { Card, CardActions, CardContent, CardHeader, Collapse, IconButton } from \"@mui/material\";\nimport { ExpandMore as ExpandMoreIcon, Redeem } from \"@mui/icons-material\";\nimport { styled } from '@mui/material/styles';\nimport { useAuth } from \"../App\";\nimport { useEffect, useState } from \"react\";\nimport { Spinner } from \"../interfaces/Spinner\";\nimport { getSpinner } from \"../api/api\";\nimport { SpinnerItem } from \"../interfaces/SpinnerItem\";\n\nconst ExpandMore = styled((props: {expand: boolean}) => {\n  const { expand: boolean, ...other } = props;\n  return <IconButton {...other} />;\n    })(({ theme, expand }) => ({\n    transform: !expand ? 'rotate(0deg)' : 'rotate(180deg)',\n    marginLeft: 'auto',\n    transition: theme.transitions.create('transform', {\n        duration: theme.transitions.duration.shortest,\n    }),\n}));\n\nfunction sortSpinnerOddsByChance(spinner: Spinner) {\n    return spinner.items.sort((a: SpinnerItem, b: SpinnerItem) => b.chance - a.chance);\n}\n\nexport default function SpinnerOdds() {\n    const auth = useAuth();\n    const [spinner, setSpinner] = useState({} as Spinner);\n    const [expandSpinnerOddsTable, setExpandSpinnerOddsTable] = useState(false);\n\n    useEffect(() => {\n        const initSpinnerOdds = async () => {\n            let spinnerOdds = await getSpinner(auth.user.jwt, 1);\n            spinnerOdds.items = sortSpinnerOddsByChance(spinnerOdds);\n            setSpinner(spinnerOdds);\n        }\n\n        initSpinnerOdds();\n    }, [auth]);\n\n    return(\n        <Card>\n            <CardHeader title='Spinner Odds' avatar={<Redeem/>}/>\n            <CardContent>\n                <div className='h-60'>\n                    <SpinnerOddsChart spinner={spinner}/>\n                </div>\n            </CardContent>\n            <CardActions \n                disableSpacing\n                onClick={() => setExpandSpinnerOddsTable(!expandSpinnerOddsTable)}\n                sx={{cursor: 'pointer'}}\n            >\n                <p style={{fontSize: '14px', marginLeft: 'auto'}}>\n                    {expandSpinnerOddsTable ? 'Hide' : 'Show'} Details\n                </p>\n                <ExpandMore\n                    expand={expandSpinnerOddsTable}\n                    aria-expanded={expandSpinnerOddsTable}\n                    aria-label=\"show more\"\n                >\n                    <ExpandMoreIcon />\n                </ExpandMore>\n            </CardActions>\n            <Collapse in={expandSpinnerOddsTable} timeout=\"auto\" unmountOnExit>\n                <CardContent>\n                    <SpinnerOddsTable spinner={spinner} />\n                </CardContent>\n            </Collapse>\n        </Card> \n    )\n}","import { Avatar, Card, CardHeader, CardMedia, Typography } from \"@mui/material\";\nimport { Pack } from \"../interfaces/Pack\"\n\nfunction getPackImage(pack: Pack): string {\n    const primaryImage = pack.images.find(img => img.name === 'image');\n    if (primaryImage)\n        return primaryImage.url;\n    return pack.images[0].url;\n}\n\nexport default function StorePack({ pack }: { pack: Pack }) {\n    return(\n        <Card variant='outlined' sx={{width: '10em', height: '100%'}}>\n            <CardHeader \n                sx={{ height: '4em' }}\n                avatar={\n                    <Avatar variant='square' src={`${process.env.PUBLIC_URL}/packTypeIcons/${pack.acquireType[0]}.svg`}/>\n                }\n                title={\n                    <Typography variant=\"body1\" sx={{opacity: 1, fontSize: 12 }}>\n                        {pack.name}\n                    </Typography>\n                }\n            />\n            <CardMedia\n                sx={{ p: 2 }}\n                component='img'\n                height='140'\n                image={`https://cdn.epics.gg${getPackImage(pack)}`}\n                alt='No pack preview found'\n            />\n            <Typography variant=\"body2\" sx={{ p: 2, textAlign: 'center' }}>\n                Stock: {pack.inventoryCount}\n            </Typography>\n        </Card>\n    )\n}","import { Grid } from \"@mui/material\";\nimport { Pack } from \"../interfaces/Pack\";\nimport StorePack from \"./StorePack\";\n\n\nexport default function StorePackDisplay({ packs }: {packs: Pack[]}) {\n    return(\n        <Grid container spacing={1} justifyContent='center' padding={2}>\n            {packs.map(pack => (\n                <Grid item key={pack.id}> \n                    <StorePack pack={pack}/>\n                </Grid>\n            ))}\n        </Grid>\n    )\n}","import { MonetizationOn } from \"@mui/icons-material\";\nimport { Card, CardHeader, CardContent } from \"@mui/material\";\nimport { useEffect, useState } from \"react\";\nimport { getStorePacks } from \"../api/api\";\nimport { useAuth } from \"../App\";\nimport { Pack } from \"../interfaces/Pack\";\nimport StorePackDisplay from \"./StorePackDisplay\";\n\nfunction filterActivePacks(packs: Pack[]) {\n    const today = new Date();\n    return packs.filter(pack => {\n        if (pack.purchaseEnd !== undefined) {\n            if (new Date(pack.purchaseEnd) > today && pack.inventoryCount > 0)\n                return true;\n        }\n        return false;\n    })\n}\n\nfunction sortPacksByInventoryCount(packs: Pack[]) {\n    return packs.sort((a: Pack, b: Pack) => b.inventoryCount - a.inventoryCount)\n}\n\nexport default function PackStock() {\n    const auth = useAuth();\n    const [packs, setPacks] = useState([] as Pack[]);\n\n    useEffect(() => {\n        let mounted = true;\n\n        const initStorePacks = async () => {\n            const storePacks = await getStorePacks(auth.user.jwt, 1);\n            const activePacks = filterActivePacks(storePacks);\n            const sortedPacks = sortPacksByInventoryCount(activePacks);\n            if (mounted)\n                setPacks(sortedPacks);\n        }\n\n        initStorePacks();\n\n        return () => {\n            mounted = false;\n        }\n    }, [auth]);\n\n    return(\n        <Card>\n            <CardHeader title='Store Packs' avatar={<MonetizationOn/>}/>\n            <CardContent>\n                <StorePackDisplay packs={packs}/>\n            </CardContent>\n        </Card>\n    )\n}","import { CompareArrows, Group, Home, Menu as MenuIcon, Restaurant, Search, Sell, SportsEsports } from \"@mui/icons-material\";\nimport { AppBar, Button, Grid, IconButton, Menu, MenuItem, Toolbar, Typography } from \"@mui/material\";\nimport { MouseEvent, useState } from \"react\";\nimport { BrowserView, MobileView } from \"react-device-detect\";\nimport { useHistory } from \"react-router\";\n\ninterface Route {\n    name: string\n    icon: JSX.Element\n    isActive: boolean\n    path: string\n    disabled: boolean\n}\n\n\nexport default function Navbar() {\n    const history = useHistory();\n\n    const isActiveRoute = (routeName: string) => {\n        return routeName === history.location.pathname;\n    }\n\n    const routes: Route[] = [\n        {\n            name: 'Home', \n            icon: <Home />, \n            isActive: isActiveRoute('/'), \n            path: '/',\n            disabled: false\n        },\n        {\n            name: 'Mint Search', \n            icon: <Search />, \n            isActive: isActiveRoute('/mintsearch'), \n            path: '/mintsearch',\n            disabled: true\n        },\n        {\n            name: 'Mass List', \n            icon: <Sell />, \n            isActive: isActiveRoute('/masslist'), \n            path: '/masslist',\n            disabled: true\n        },\n        {\n            name: 'Rush Games', \n            icon: <SportsEsports />, \n            isActive: isActiveRoute('/rushgames'), \n            path: '/rushgames',\n            disabled: true\n        },\n        {\n            name: 'Rush Team Builder', \n            icon: <Group />, \n            isActive: isActiveRoute('/rushteam'), \n            path: '/rushteam',\n            disabled: true\n        },\n        {\n            name: 'Account Transfer', \n            icon: <CompareArrows />, \n            isActive: isActiveRoute('/accounttransfer'), \n            path: '/accounttransfer',\n            disabled: false\n        },\n        {\n            name: 'Pack Opener', \n            icon: <Restaurant />, \n            isActive: isActiveRoute('/packopener'), \n            path: '/packopener',\n            disabled: true\n        }\n    ]\n\n    const handleNavButtonClick = (route: Route) => {\n        const from: any = history.location.state || { from: { pathname: '/' } };\n        history.replace(from);\n        history.push(route.path);\n    }\n\n    const handleMenuClick = (evt: MouseEvent<HTMLButtonElement>) => {\n        setMenuAnchor(evt.currentTarget);\n    }\n\n    const handleMenuClose = () => {\n        setMenuAnchor(null);\n    };\n\n    const [menuAnchor, setMenuAnchor] = useState<null | HTMLElement>(null);\n    const openMenu = Boolean(menuAnchor)\n\n    return(\n        <>\n            <BrowserView>\n                <Grid container spacing={1}>\n                    {routes.map((route: Route) => (\n                        <Grid item key={route.path}>\n                            <Button \n                                variant={route.isActive ? 'contained' : 'outlined'}\n                                disabled={route.disabled}\n                                onClick={() => handleNavButtonClick(route)}\n                            >\n                                {route.icon}&nbsp;\n                                {route.name}\n                            </Button>\n                        </Grid>\n                    ))}\n                </Grid>\n            </BrowserView>\n            <MobileView>\n                <AppBar position='static'>\n                    <Toolbar>\n                        <Typography variant=\"body1\" component=\"div\" sx={{ flexGrow: 1 }}>\n                            Menu\n                        </Typography>\n                        <IconButton \n                            color='primary'\n                            aria-controls=\"basic-menu\"\n                            aria-haspopup=\"true\"\n                            aria-expanded={openMenu ? 'true' : undefined}\n                            onClick={handleMenuClick}\n                        >\n                            <MenuIcon/>\n                        </IconButton>\n                        <Menu\n                            id='nav-menu'\n                            anchorEl={menuAnchor}\n                            open={openMenu}\n                            onClose={handleMenuClose}\n                        >\n                            {routes.map((route: Route) => (\n                                <MenuItem\n                                    key={route.path}\n                                    disabled={route.disabled}\n                                    onClick={() => handleNavButtonClick(route)}\n                                >\n                                    {route.icon}&nbsp;\n                                    {route.name}\n                                </MenuItem>\n                            ))}\n                        </Menu>\n                    </Toolbar>\n                </AppBar>\n            </MobileView>\n        </>\n    )\n}","import SpinnerOdds from \"./SpinnerOdds\";\nimport PackStock from \"./PackStock\";\nimport { Grid } from \"@mui/material\";\nimport Navbar from \"../Navigation/Navbar\";\n\n\nexport default function Home() {\n    return(\n        <Grid container spacing={2} p={2}>\n            <Grid item xs={12}>\n                <Navbar />\n            </Grid>\n            <Grid item lg={6} sm={12}>\n                <PackStock />\n            </Grid>\n            <Grid item lg={6} sm={12}>\n                <SpinnerOdds />\n            </Grid>\n        </Grid>\n    )\n}","import './AccountSelector.css';\nimport { useEffect, useRef, useState } from \"react\";\nimport { searchUsers } from \"../api/api\";\nimport { useAuth } from \"../App\";\nimport { UserSearchResult } from \"../interfaces/UserSearchResult\";\nimport BaseContainer from '../BaseComponents/BaseContainer';\nimport BaseButton from '../BaseComponents/BaseButton';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSearch } from '@fortawesome/free-solid-svg-icons';\n\ninterface AccountSelectorProps {\n    onUserSelect: (user: UserSearchResult) => void\n}\n\nexport default function AccountSelector(props: AccountSelectorProps) {\n    const [userSearchInput, setUserSearchInput] = useState('');\n    const [userSearchResults, setUserSearchResults] = useState([] as UserSearchResult[]);\n    const [selectedUser, setSelectedUser] = useState({} as UserSearchResult);\n    const [showSearchResultsMenu, setShowSearchResultsMenu] = useState(false);\n    const auth = useAuth();\n\n    async function handleUserSearch() {\n        const searchResults = await searchUsers(auth.user.jwt, userSearchInput);\n        setUserSearchResults(searchResults);\n    }\n\n    function handleUserSelection(user: UserSearchResult) {\n        setSelectedUser(user);\n        props.onUserSelect(user);\n        setShowSearchResultsMenu(false);\n    }\n\n    useEffect(() => {\n        if (userSearchResults.length > 0) {\n            setShowSearchResultsMenu(true);\n        } else {\n            setShowSearchResultsMenu(false);\n        }\n    }, [userSearchResults])\n\n    const inputField: any = useRef(null);\n    useEffect(() => window.addEventListener('click', evt => {\n        if (inputField.current && inputField.current.contains(evt.target) && userSearchResults.length > 0)\n            setShowSearchResultsMenu(true);\n        else\n            setShowSearchResultsMenu(false);\n    }))\n\n    return(\n        <BaseContainer title='Select Account' description='This is where your items will be sent.'>\n            <div className='accSelectorContainer'>\n                <form onSubmit={handleUserSearch} className='searchForm'>\n                    <input\n                        autoComplete='off'\n                        ref={inputField}\n                        id='userSearchInput'\n                        className='searchInput'\n                        placeholder='Search users...'\n                        onChange={evt => {\n                            setUserSearchInput(evt.target.value);\n                        }}\n                    />\n                    {showSearchResultsMenu ? \n                        <ul className='dropdown'>\n                            {userSearchResults.map((user: UserSearchResult) => (\n                                <li key={user.id} className='dropdownItem' onClick={() => handleUserSelection(user)}>\n                                    {user.username}\n                                </li>\n                            ))}\n                        </ul>\n                    : <></>}\n                    <BaseButton type='submit' onClick={handleUserSearch} className='userSearchBtn'>\n                        <FontAwesomeIcon icon={faSearch}/>\n                    </BaseButton>\n                </form>\n                {selectedUser.id ? \n                    <div className='selectedUser'>\n                        <img\n                            className='avatar'\n                            src={`https://cdn.epics.gg${selectedUser.avatar}`}\n                            alt='User Avatar'\n                        />\n                        <p>{selectedUser.username}</p>\n                    </div>\n                : <p className='infoText'>No user selected.</p>}\n            </div>\n        </BaseContainer>\n    )\n}","import { ReactNode, useEffect, useState } from \"react\"\nimport './ProgressBar.css'\n\ntype Props = {\n    max: number\n    progress: number\n    children?: ReactNode\n    className?: string\n}\n\nexport default function ProgressBar({max, progress, children, className}: Props) {\n    const [barWidth, setBarWidth] = useState(`${(progress/max)*100}`);\n    useEffect(() => {\n        setBarWidth(`${(progress/max)*100}%`);\n    }, [max, progress])\n\n    return(\n        <>\n        <div className={`progressContainer ${className}`}>\n            <div style={{width: barWidth}} id='progressBar'>\n                {children}\n            </div>\n        </div>\n        </>\n    )\n}","import BaseContainer from \"../BaseComponents/BaseContainer\";\nimport './FilterSelector.css';\n\ntype Props = {\n    onChange: Function\n}\n\nexport default function FilterSelector({onChange}: Props) {\n    const seasons = [\"Founders Edition\", \"2018\", \"2019\", \"2020\", \"2021\"];\n\n    function handleSeasonSelect() {\n        let inputs: HTMLInputElement[] = Array.from(document.querySelectorAll('input[type=\"checkbox\"]:checked'));\n        onChange(inputs.map((input: HTMLInputElement) => input.value));\n    }\n\n    return(\n        <BaseContainer title='Filter Seasons / Collections' description='Change which Seasons you want to include in the transfer.'>\n            <div className='seasonsContainer'>\n                {seasons.map(season => (\n                    <label key={season} className=\"checkbox\">\n                        <input \n                            type=\"checkbox\" \n                            defaultChecked\n                            onChange={handleSeasonSelect}\n                            value={season}\n                            name={season}\n                        />\n                        {season}\n                  </label>\n                ))}\n            </div>\n        </BaseContainer>\n    )\n}","import './AccountTransfer.css';\nimport { useEffect, useState } from \"react\";\nimport { UserSearchResult } from \"../interfaces/UserSearchResult\";\nimport Navbar from \"../Navigation/Navbar\";\nimport AccountSelector from \"./AccountSelector\";\nimport { getAllItemIds, getUserCollections } from '../api/api';\nimport { useAuth } from '../App';\nimport { UserCollection } from '../interfaces/UserCollection';\nimport BaseButton from '../BaseComponents/BaseButton';\nimport ProgressBar from '../BaseComponents/ProgressBar';\nimport FilterSelector from './FilterSelector';\n\ninterface TradeItem {\n    id: number\n    type: 'card' | 'sticker'\n}\n\nexport default function AccountTransfer() {\n    const [selectedUser, setSelectedUser] = useState({} as UserSearchResult);\n    const [tradeItems, setTradeItems] = useState([] as TradeItem[]);\n    const [collectionProgress, setCollectionProgress] = useState(0);\n    const [totalCollections, setTotalCollections] = useState(0);\n    const [allowedSeasons, setAllowedSeasons] = useState([] as string[]);\n    const auth = useAuth();\n\n    function handleUserSelect(user: UserSearchResult) {\n        setSelectedUser(user);\n    }\n\n    async function scanUserItems() {\n        const collections = await getUserCollections(auth.user.jwt, auth.user.id, 1);\n        setTotalCollections(collections.length);\n        const items: TradeItem[] = [];\n        collections.forEach(async (coll: UserCollection) => {\n            if (coll.count === 0)\n                return;\n            for (const type of coll.collection.properties.entity_types) {\n                if (type !== 'card' && type !== 'sticker')\n                    continue;\n                const ids = await getAllItemIds(auth.user.jwt, auth.user.id, coll.collection.id, type, 1);\n                for (const id of ids) {\n                    items.push({id: id, type: type})\n                }\n            }\n            setTradeItems([...tradeItems, ...items]);\n        })\n    }\n\n    function handleSeasonSelect(seasons: string[]) {\n        setAllowedSeasons(seasons);\n    }\n\n    useEffect(() => setCollectionProgress(c => c + 1), [tradeItems])\n\n    return(\n        <div className='accTransferContainer'>\n            <Navbar/>\n            {totalCollections > 0 && collectionProgress < totalCollections ?\n                <ProgressBar max={totalCollections} progress={collectionProgress}/>\n            : <></>}\n            <AccountSelector onUserSelect={user => handleUserSelect(user)}/>\n            <FilterSelector onChange={handleSeasonSelect}/>\n            <BaseButton onClick={() => scanUserItems()}>Start Transfer</BaseButton>\n            <p>{tradeItems.length}</p>\n        </div>\n    )\n}","import './App.css';\nimport './index.css';\nimport Login from './Login/Login';\nimport Home from './Home/Home';\nimport {\n  HashRouter as Router,\n  Route,\n  Switch,\n  Redirect\n} from 'react-router-dom';\nimport { useContext, createContext, useState } from \"react\";\nimport { User } from './interfaces/User';\nimport AccountTransfer from './AccountTransfer/AccountTransfer';\n\ninterface Auth {\n  user: User\n  signin: (user: User) => void\n  signout: () => void\n}\n\nconst authContext = createContext({user: {} as User, signin: (user: User) => {}, signout: () => {}} as Auth);\n\nfunction ProvideAuth({ children }: any) {\n  const auth = useProvideAuth();\n  return (\n    <authContext.Provider value={auth}>\n      {children}\n    </authContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  return useContext(authContext);\n}\n\nfunction useProvideAuth() {\n  const [user, setUser] = useState({} as User);\n\n  const signin = (user: any) => {\n    let newUser: User = user.user;\n    newUser.jwt = user.jwt;\n    setUser(newUser);\n  };\n\n  const signout = () => {\n    setUser({} as User);\n  };\n\n  return {\n    user,\n    signin,\n    signout\n  } as Auth;\n}\n\nfunction PrivateRoute({ children, ...rest }: any) {\n  let auth = useAuth();\n  return (\n    <Route\n      {...rest}\n      render={({ location }) =>\n        auth.user.jwt ? (\n          children\n        ) : (\n          <Redirect\n            to={{\n              pathname: \"/login\",\n              state: { from: location }\n            }}\n          />\n        )\n      }\n    />\n  );\n}\n\nfunction App() {\n  return (\n    <ProvideAuth>\n      <Router>\n        <Switch>\n          <Route path='/login' exact render={() => <Login/>}/>\n          <PrivateRoute path='/accounttransfer'>\n            <AccountTransfer/>\n          </PrivateRoute>\n          <PrivateRoute path='/'>\n            <Home/>\n          </PrivateRoute>\n        </Switch>\n      </Router>\n    </ProvideAuth>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createTheme } from '@mui/material';\n\nexport const theme = createTheme({\n  palette: {\n    mode: 'dark',\n    primary: {\n      main: '#2bc7c4',\n    },\n    secondary: {\n      main: '#f50057',\n    },\n  },\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ThemeProvider } from '@mui/system';\nimport { theme } from './theme';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}